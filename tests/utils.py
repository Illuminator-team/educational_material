from pathlib import Path
import pytest
import nbformat
from nbclient import NotebookClient
import pandas as pd
import numpy as np


def execute_notebook(notebook_path : Path):
    """
    Executes a Jupyter notebook in-place.

    This function reads the given notebook, executes it using `nbclient`,
    and raises a test failure via pytest if any cell errors occur during execution.

    Parameters:
    ----------
    notebook_path : Path
        The path to the notebook file to be executed.

    Raises:
    ------
    pytest.fail
        If execution of the notebook raises any error.
    """
    nb = nbformat.read(notebook_path, as_version=4)
    client = NotebookClient(nb, timeout=300, resources={"metadata": {"path": str(notebook_path.parent)}})

    try:
        client.execute()
    except Exception as e:
        pytest.fail(f"Execution failed for {notebook_path}:\n{e}")


def compare_output_files(
        actual : Path,
        expected : Path,
        float_columns: list[str],
        tolerance: float = 1e-6
):
    """
    Executes a Jupyter notebook in-place.

    This function reads the given notebook, executes it using `nbclient`,
    and raises a test failure via pytest if any cell errors occur during execution.

    Parameters:
    ----------
    notebook_path : Path
        The path to the notebook file to be executed.

    Raises:
    ------
    pytest.fail
        If execution of the notebook raises any error.
    """
    # Check the output file was generated by the notebook
    assert actual.exists(), f"Missing output file: {actual.name}"

    df_expected = pd.read_csv(expected, parse_dates=["date"])
    df_actual = pd.read_csv(actual, parse_dates=["date"])

    # Compate file rows and columns
    assert df_actual.shape == df_expected.shape, f"{actual.name}: Output files have different shapes"

    # Compare dates exactly
    assert (df_actual["date"] == df_expected["date"]).all(), "Date columns do not match"

    # Compare the float columns with tolerance
    for col in float_columns:
        assert col in df_actual.columns, f"{actual.name}: Missing column '{col}'"
        assert np.allclose(
            df_actual[col],
            df_expected[col],
            rtol=0,
            atol=tolerance
        ), f"{actual.name}: {col} values differ beyond tolerance"